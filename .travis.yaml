os:
- linux

language: rust

rust:
- stable

cache:
- apt

matrix:
  include:
    - env:
      - TARGET=x86_64-unknown-linux-gnu

      addons:
        apt:
          packages:
            - tar
            - jq

    - env:
      - TARGET=x86_64-pc-windows-gnu
      - LINKER=a
      addons:
        apt:
          packages:
            - jq
            - tar
            - zip
            - mingw-w64

install:
  - export PATH="$PATH:$HOME/.cargo/bin"
  - rustup target add $TARGET || true
  - |
    if [ -n "$LINKER" ]; then
      mkdir -p ~/.cargo
      echo >> ~/.cargo/config			
      echo '[target.x86_64-pc-windows-gnu]' >> ~/.cargo/config
			echo 'linker = "x86_64-w64-mingw32-gcc"' >> ~/.cargo/config
			echo 'ar = "x86_64-w64-mingw32-gcc-ar"' >> ~/.cargo/config
    fi

script:
  - cd src-binary
  - cargo build --target $TARGET --verbose --release

before_deploy:
  - export CARGO_METADATA=$(cargo metadata --no-deps --format-version 1)
  - export APP_NAME=$(echo $CARGO_METADATA | jq -r '.packages[0].name')
  - export APP_VERSION=$(echo $CARGO_METADATA | jq -r '.packages[0].version')
	- [[ $TARGET =~ 64 ]] && TARGET_PRETTY="x86_64" || TARGET_PRETTY="i686"
	- [[ $TARGET =~ linux ]] && TARGET_PRETTY=nix-$TARGET_PRETTY
	- [[ $TARGET =~ windows ]] && TARGET_PRETTY=win-$TARGET_PRETTY
  - |
    if [ $TARGET =~ "windows" ]; then
      FILES=$(find target/$TARGET/release/$RELEASE* ! -iname '*.d')
      PACKAGE=$APP_NAME-$APP_VERSION-$TARGET_PRETTY.zip
      zip -j releases/$PACKAGE $FILES >/dev/null 2>/dev/null
    fi
  - |
    if [ $TARGET =~ "linux" ]; then
      FILES=$(find target/$TARGET/release/$RELEASE* ! -iname '*.d' | sed "s/[^\/]*\/[^\/]*\/[^\/]*\///")
      PACKAGE=$APP_NAME-$APP_VERSION-$TARGET_PRETTY.tar.xz
      tar cf releases/$PACKAGE -C target/$TARGET/release $FILES >/dev/null 2>/dev/null
    fi

deploy:
  provider: releases
  api_key:
    secure: YOUR SECURITY KEY
  file: ${PACKAGE}
  skip_cleanup: true
  on:
    tags: true
    repo: YOURREPONAME